<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小灰灰的乱世奇谈</title>
    <link>https://buyunhui.github.io/post/</link>
    <description>Recent content in Posts on 小灰灰的乱世奇谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>suiyelian(卜云辉)</copyright>
    <lastBuildDate>Sun, 15 Apr 2018 14:57:23 +0800</lastBuildDate>
    
	<atom:link href="https://buyunhui.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exceptional C&#43;&#43;读书笔记一</title>
      <link>https://buyunhui.github.io/post/c&#43;&#43;%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/c&#43;&#43;%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>c/c++读书系列(EffectiveC++中文版) 1.取值迭代器时，务必确保迭代器有效 有效的数值：避免*iter.end(),直接复位了。</description>
    </item>
    
    <item>
      <title>python decorate</title>
      <link>https://buyunhui.github.io/post/python-decorate/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python-decorate/</guid>
      <description>python 装饰器 现在需要在函数运行前后打印一条日志, 但是又不希望或者没有权限修改函数内部的结构, 就可以用到装饰器(decorator): def log(function): def wrapper(*args, **kwargs): print</description>
    </item>
    
    <item>
      <title>python functools详解</title>
      <link>https://buyunhui.github.io/post/python-functools_/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python-functools_/</guid>
      <description>functools — 高阶函数 functools.cmp_to_key(func) 它是一个key函数，可提供给sorted(), min(), max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby().等函数使用 eg:sorted(iterable, key=cmp_to_key(locale.strcoll)) # locale-aware sort order @functools.lru_cache(maxsize=128, typed=False) 装饰器</description>
    </item>
    
    <item>
      <title>python itertools详解</title>
      <link>https://buyunhui.github.io/post/python-itertools/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python-itertools/</guid>
      <description>itertools api: Itertool functions itertools.accumulate(iterable[, func ]) def accumulate(iterable, func=operator.add): &#39;Return running totals&#39; # accumulate([1,2,3,4,5]) --&amp;gt; 1 3 6 10 15 # accumulate([1,2,3,4,5], operator.mul) --&amp;gt; 1 2 6 24 120 it = iter(iterable) try: total = next(it) except StopIteration: return yield total for element in it: total = func(total, element) yield total eg: &amp;gt;&amp;gt;&amp;gt; data = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8] &amp;gt;&amp;gt;&amp;gt; list(accumulate(data, operator.mul)) #</description>
    </item>
    
    <item>
      <title>python sort记录</title>
      <link>https://buyunhui.github.io/post/python-sort/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python-sort/</guid>
      <description>python sort 1. Sorting Basics sorted：函数排序副本，不影响原序列 &amp;gt;&amp;gt;&amp;gt;a = [5, 2, 3, 1, 4] &amp;gt;&amp;gt;&amp;gt;sorted(a) [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; a [5, 2, 3, 1, 4] List sort 函数 return None对列表本身进行排序 &amp;gt;&amp;gt;&amp;gt;a = [5, 2, 3, 1, 4]</description>
    </item>
    
    <item>
      <title>python 常用函数</title>
      <link>https://buyunhui.github.io/post/python-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>python 常用函数 1.operator模块 itemgetter operator.itemgetter(item) operator.itemgetter(*items) Return a callable object that fetches item from its operand using the operand’s getitem() method. If multiple items are specified, returns a tuple of lookup values. For example: • After f = itemgetter(2), the call f&amp;reg; returns r[2]. • After g =</description>
    </item>
    
    <item>
      <title>python 类</title>
      <link>https://buyunhui.github.io/post/python%E7%B1%BB1/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python%E7%B1%BB1/</guid>
      <description>python Class 1.变量作用域 在python中，*当前作用域局部变量-&amp;gt;外层作用域变量-&amp;gt;当前模块中的全局变量-&amp;gt;python内置变量</description>
    </item>
    
    <item>
      <title>python 类继承</title>
      <link>https://buyunhui.github.io/post/%E7%B1%BB%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/%E7%B1%BB%E7%BB%A7%E6%89%BF/</guid>
      <description>类继承 经典类和新式类 首先得说明的是,Python的类分为经典类 和 新式类 经典类是python2.2之前的东西,但是在2.7还在兼容,但是在3之</description>
    </item>
    
    <item>
      <title>python 黑魔法</title>
      <link>https://buyunhui.github.io/post/python%E9%BB%91%E9%AD%94%E6%B3%95/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python%E9%BB%91%E9%AD%94%E6%B3%95/</guid>
      <description>python 黑魔法 1、上下文管理器 概述 在正常的管理各种系统资源(文件、锁定和连接)，在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放</description>
    </item>
    
    <item>
      <title>python类的定制</title>
      <link>https://buyunhui.github.io/post/python%E5%AE%9A%E5%88%B6%E7%B1%BB/</link>
      <pubDate>Sun, 15 Apr 2018 14:57:23 +0800</pubDate>
      
      <guid>https://buyunhui.github.io/post/python%E5%AE%9A%E5%88%B6%E7%B1%BB/</guid>
      <description>python定制类 1.Python中 getattribute vs getattr vs get浅谈 __get__, __getattr__和__getattribute都是访问属性的方法，但不太相同。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://buyunhui.github.io/post/1%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://buyunhui.github.io/post/1%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>python 装饰器 现在需要在函数运行前后打印一条日志, 但是又不希望或者没有权限修改函数内部的结构, 就可以用到装饰器(decorator): def log(function): def wrapper(*args, **kwargs): print</description>
    </item>
    
    <item>
      <title></title>
      <link>https://buyunhui.github.io/post/postgres%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://buyunhui.github.io/post/postgres%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>#postgres数据库学习笔记一（基础入门） 1.基本操作 1.1 创建，删除 createdb mydb dropdb mydb \c mydb 切换数据库 1.2 查看数据库 1.2.1 查看数据库 \l //\加上字母l,相当</description>
    </item>
    
    <item>
      <title></title>
      <link>https://buyunhui.github.io/post/python%E5%85%83%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://buyunhui.github.io/post/python%E5%85%83%E7%B1%BB/</guid>
      <description>python元类 1. 在python中，一切皆对象 class ObjectCreator(object): pass 将在内存中创建一个对象，名字就是ObjectCreator。这个对象（类）自身拥有创建对</description>
    </item>
    
  </channel>
</rss>